<?php
/**
 * ASSETIC WRAPPER 
 * https://github.com/kriswallsmith/assetic
 *  
 * when installing dependencies from composer I ran into some BS
 * defining
 *	"autoload" : {
 *		"classmap" : [
 *			"SERVICES"
 *		]
 *	}
 * 
 * DOESNT allow a dependent project using the psr-0 namespace 
 * (or more explicitly defines a "psr-0" section under its own "autoload" definition ) 
 * to be parsed for a reason I wasn't able to determine in less than 20 mins...
 * 
 * you need to add the projects source directory to the autoload->classmap
 * of the main projects composer.json
 *	"autoload" : {
 *		"classmap" : [
 *			"SERVICES",
 *			"vendor/kriswallsmith/assetic/src"
 *		]
 *	} * 
 * 
 * 
 * 
 * 
 * @author	Jason Medland<jason.medland@gmail.com>
 * @package	SERVICE\METRONIC\ASSETIC
 * @subpackage	
 */
 
 

namespace JCORE\SERVICE\HTTP_OPTIMIZATION\ASSETIC;

#use JCORE\TRANSPORT\SOA\SOA_BASE as SOA_BASE;
#use JCORE\DAO\DAO as DAO;

/*
*/
use Assetic\AssetManager AS AssetManager;
use Assetic\AssetWriter AS AssetWriter;
use Assetic\Asset\AssetCollection AS AssetCollection;
use Assetic\Asset\BaseAsset AS BaseAsset;
use Assetic\Asset\FileAsset AS FileAsset;
use Assetic\Asset\GlobAsset AS GlobAsset;
use Assetic\Asset\HttpAsset AS HttpAsset;
use Assetic\Asset\StringAsset AS StringAsset;
use Assetic\Asset\AssetCache AS AssetCache;
use Assetic\Filter\FilterInterface AS FilterInterface;
use Assetic\Filter\DependencyExtractorInterface AS DependencyExtractorInterface;
use Assetic\Filter\BaseNodeFilter AS BaseNodeFilter;

/* CSS FILTERS 
use Assetic\Filter\CssMinFilter AS CssMinFilter;
use Assetic\Filter\CleanCssFilter AS CleanCssFilter;
use Assetic\Filter\UglifyCssFilter AS UglifyCssFilter;
use Assetic\Filter\CssRewriteFilter AS CssRewriteFilter;
*/

/* JS FILTERS 
use Assetic\Filter\JSMinFilter AS JSMinFilter;
use Assetic\Filter\JSMinPlusFilter AS JSMinPlusFilter;
use Assetic\Filter\JSqueezeFilter AS JSqueezeFilter;
use Assetic\Filter\UglifyJs2Filter AS UglifyJs2Filter;
use Assetic\Filter\UglifyJsFilter AS UglifyJsFilter;
use Assetic\Filter\GoogleClosure\CompilerApiFilter AS ClosureCompilerApiFilter;
*/

/**
 * Class ASSETIC_WRAPPER
 *
 * @package JCORE\SERVICE\HTTP_OPTIMIZATION\ASSETIC
*/
class ASSETIC_WRAPPER { 

	/**
	* CACHE_PATH
	* 
	* @access public 
	* @var string 
	*/
	public $CACHE_PATH = '';
	/**
	* HTTP_PATH
	* 
	* @access public 
	* @var string 
	*/
	public $HTTP_PATH = '';
	/**
	* CSS_FILTER
	* 
	* @access public 
	* @var array
	*/
	public	$CSS_FILTER = array();
	/**
	*JS_FILTER
	* 
	* @access public 
	* @var array 
	*/
	public	$JS_FILTER = array();
	
	/**
	*  __construct
	* 
	* @access public
	* @param array args 
	* @return bool  
	*/
	public function __construct($args=null){


		$this->config = $GLOBALS['CONFIG_MANAGER']->getSetting($LOAD_ID = 'ASSETIC');
		#echo __METHOD__.'@'.__LINE__.'  $this->config<pre>['.var_export($this->config, true).']</pre> '.'<br>'.PHP_EOL;
		
		if(
			isset($this->config["FILTERS"]["CSS"]["DEFAULT"]) 
			&& 
			'' != $this->config["FILTERS"]["CSS"]["DEFAULT"]
		){
			$this->CSS_FILTER[] = new $this->config["FILTERS"]["CSS"]["DEFAULT"]();
		}
		if(
			isset($this->config["FILTERS"]["JS"]["DEFAULT"]) 
			&& 
			'' != $this->config["FILTERS"]["JS"]["DEFAULT"]
		){
			$this->JS_FILTER[] = new $this->config["FILTERS"]["JS"]["DEFAULT"]();
		}
		if(isset($this->config["CACHE_PATH"])){
			$this->CACHE_PATH = $this->config["CACHE_PATH"];
		}
		
		if(isset($this->config["HTTP_PATH"])){
			$this->HTTP_PATH = $this->config["HTTP_PATH"];
		}
		
		
		
		$this->FULL_CACHE_PATH = $GLOBALS["APPLICATION_ROOT"].$this->CACHE_PATH;
		#echo __METHOD__.'@'.__LINE__.'  $this->FULL_CACHE_PATH['.$this->FULL_CACHE_PATH.'] '.'<br>'.PHP_EOL; 
		if(isset($args["FULL_CACHE_PATH"]) || '' != $args["FULL_CACHE_PATH"]){
			$this->FULL_CACHE_PATH = $args["FULL_CACHE_PATH"];
		}
		#echo __METHOD__.'@'.__LINE__.'  $this->FULL_CACHE_PATH['.$this->FULL_CACHE_PATH.'] '.'<br>'.PHP_EOL; 

		$this->FULL_HTTP_PATH = $this->HTTP_PATH;
		#echo __METHOD__.'@'.__LINE__.'  $this->FULL_HTTP_PATH['.$this->FULL_HTTP_PATH.'] '.'<br>'.PHP_EOL; 
		if(isset($args["FULL_HTTP_PATH"]) || '' != $args["FULL_HTTP_PATH"]){
			$this->FULL_HTTP_PATH = $args["FULL_HTTP_PATH"];
		}
		
		#echo __METHOD__.'@'.__LINE__.'  $this->FULL_HTTP_PATH['.$this->FULL_HTTP_PATH.'] '.'<br>'.PHP_EOL; 

		/*
		echo __METHOD__.'@'.__LINE__.'  $_SERVER["DOCUMENT_ROOT"]['.$_SERVER["DOCUMENT_ROOT"].'] '.'<br>'.PHP_EOL; 
		echo __METHOD__.'@'.__LINE__.'  $_SERVER["HTTP_HOST"]['.$_SERVER["HTTP_HOST"].'] '.'<br>'.PHP_EOL; 
		*/
		
		if(!is_dir($this->FULL_CACHE_PATH)){
			echo __METHOD__.'@'.__LINE__.'   '.'<br>'.PHP_EOL; 
			return '$this->CACHE_PATH ['.$this->CACHE_PATH."] doesn't exist ";
		}
		if(!is_dir($_SERVER["DOCUMENT_ROOT"].'/'.$this->HTTP_PATH)){
			echo __METHOD__.'@'.__LINE__.'  ['.$_SERVER["DOCUMENT_ROOT"].$this->HTTP_PATH.'] '.'<br>'.PHP_EOL; 
			return '$this->HTTP_PATH ['.$this->HTTP_PATH."] doesn't exist ";
		}
		#echo __METHOD__.'@'.__LINE__.'  $this<pre>['.var_export($this, true).']</pre> '.'<br>'.PHP_EOL;
		
		
		return false;
	}
	/**
	* DESCRIPTOR: init
		* 
	* @access public
	* @param array args 
	* @return null  
	*/
	public function init($args=null){
		
	
		return;
	}
	/**
	* getCachePath
	* 
	* @access public
	* @param array args 
	* @return string  
	*/
	public function getCachePath($args=null){
		#CACHE_PATH $GLOBALS["APPLICATION_ROOT"].
		return $GLOBALS["APPLICATION_ROOT"].$this->CACHE_PATH;
	}
	/**
	* getHttpResolvedPath
	* 
	* @access public
	* @param array args 
	* @return string  
	*/
	public function getHttpResolvedPath($args=null){
		#HTTP_PATH
		return $_SERVER["DOCUMENT_ROOT"].'/'.$this->HTTP_PATH;
		#return $this->HTTP_PATH;
	}
	/**
	* getHttpPath
	* 
	* @access public
	* @param array args 
	* @return string  
	*/
	public function getHttpPath($args=null){
		return '/'.$this->HTTP_PATH;
	}
	/**
	* flushCache
	* DELETE IT ALL 
	* 
	* @access public
	* @param array args 
	* @return string  
	*/
	public function flushCache($args=null){
		$pattern = $this->FULL_CACHE_PATH.'/*.{css,js}';
		$fileList = glob($pattern,GLOB_BRACE);
		#echo __METHOD__.'@'.__LINE__.'pattern <pre>['.var_export($pattern,true).']</pre>'.PHP_EOL;
		#echo __METHOD__.'@'.__LINE__.'fileList <pre>['.var_export($fileList,true).']</pre>'.PHP_EOL;
		foreach($fileList AS $key => $value){
			if(file_exists($value)){
				$killIt = unlink($value);
				if(false === $killIt){
					#echo __METHOD__.'@'.__LINE__.' FAILED TO DELETE ['.$value.']'.PHP_EOL;
				}
			}
		}
		/*
			$hashResult = 'POISON';
			bool unlink ( string $filename [, resource $context ] )
			array glob ( string $pattern [, int $flags = 0 ] )
			$this->FULL_CACHE_PATH
		$fileList = glob($pattern,GLOB_BRACE);
		echo __METHOD__.'@'.__LINE__.'fileList <pre>['.var_export($fileList,true).']</pre>'.PHP_EOL;
		*/
		
		return; # file_put_contents($_SERVER["DOCUMENT_ROOT"].'/'.$this->HTTP_PATH.'compiled.check', $hashResult);
	}
	
	/**
	* pauseCache
	* 
	* @access public
	* @param array args 
	* @return string  
	*/
	public function pauseCache($args=null){
		$hashResult = 'IGNORE';
		return file_put_contents($_SERVER["DOCUMENT_ROOT"].'/'.$this->HTTP_PATH.'compiled.check', $hashResult);
	}
	/**
	* enableCache
	* 
	* @access public
	* @param array args 
	* @return string  
	*/
	public function enableCache($args=null){
		$hashResult = '';
		return file_put_contents($_SERVER["DOCUMENT_ROOT"].'/'.$this->HTTP_PATH.'compiled.check', $hashResult);
	}
	
	/**
	* getCachedName
	* 
	* @access public
	* @param array args 
	* @return string  
	*/
	public function getCachedName($args=null){
		$checkCacheArgs = $this->checkCacheArgs($args);
		if(true !== $checkCacheArgs){
			return $checkCacheArgs;
		}
		
		$filename = $args["name"];
		if(!is_scalar($args["route"]) || '' != $args["route"] ){
			if(
				false !== stripos($this->FULL_HTTP_PATH, 'http')
				||
				'external' == strtolower( $args["route"])
			){
				echo __METHOD__.'@'.__LINE__ .'http exists in this->FULL_HTTP_PATH ['.$this->FULL_HTTP_PATH.'] need to handle it'.PHP_EOL;
			}
			$filename = $filename.'_'.$args["route"];
			
		}
		return $filename;
	}
	
	/**
	* checkCacheArgs
	* 
	* @access public
	* @param array args 
	* @return bool  
	*/
	public function checkCacheArgs($args=null){
			#echo __METHOD__.'@'.__LINE__.'  $this->lastHash<pre>['.var_export($this->lastHash, true).']</pre> '.'<br>'.PHP_EOL;  
			#echo __METHOD__.'@'.__LINE__.'  $this->checkCompiled()<pre>['.var_export($this->checkCompiled(), true).']</pre> '.'<br>'.PHP_EOL;  
		if(false === $this->checkCompiled()){
			return $this->lastHash.' .....  ';
			
		}
		
		if(!is_array($args) || 0 == count($args) ){
			return '$args not array or empty is_array($args)['.is_array($args).'] count($args)['.count($args).']  ';
		}
		if(!is_array($args["collection"]) || 0 == count($args["collection"]) ){
			return '$args["collection"] not array or empty is_array($args)['.is_array($args["collection"]).'] count($args)['.count($args["collection"]).'] ';
		}
		if(!is_scalar($args["name"]) || '' == $args["name"] ){
			return '$args["name"] not scalar or empty ['.$args["name"].']';
		}
		return true;
	}
	/**
	* checkCompiled
	* 
	* @access public
	* @param array args 
	* @return bool  
	*/
	public function checkCompiled($args=null){
		#echo __METHOD__.'@'.__LINE__.'  $this->lastHash<pre>['.var_export($this->lastHash, true).']</pre> '.'<br>'.PHP_EOL;  
		

		if(!isset($this->lastHash)){
			$this->lastHash = '';
			if(is_file($_SERVER["DOCUMENT_ROOT"].'/'.$this->HTTP_PATH.'compiled.check')){
				$this->lastHash = file_get_contents($_SERVER["DOCUMENT_ROOT"].'/'.$this->HTTP_PATH.'compiled.check');
			}
		}
		#echo __METHOD__.'@'.__LINE__.' $this->lastHash['.$this->lastHash.'] '.PHP_EOL; 
		switch($this->lastHash){
			case "POISON":
				# delete directory contents
				#echo __METHOD__.'@'.__LINE__.' $this->lastHash['.$this->lastHash.'] '.PHP_EOL; 
				return false;
				break;
			case "IGNORE":
				#echo __METHOD__.'@'.__LINE__.' $this->lastHash['.$this->lastHash.'] '.PHP_EOL; 
				#ignore calls to read/write files
				return false;
				break;
			default:
				#echo __METHOD__.'@'.__LINE__.' $this->lastHash['.$this->lastHash.'] '.PHP_EOL; 
				#action
				return true;
				break;
		}
		
		return false;
	}
	/**
	* DESCRIPTOR: cacheCSS
	* 
	* 
	* @access public
	* @param array args 
	* @return bool  
	*/
	public function cacheCSS($args=null){
		$checkCacheArgs = $this->checkCacheArgs($args);
		if(true !== $checkCacheArgs){
			return $checkCacheArgs;
		}

		$filename = $this->getCachedName($args);
		#echo 'HAZ filename['.$filename.']<br>'.PHP_EOL;
		$AssetCollection = array();
		foreach($args["collection"] AS $key => $value){

			
			if(!isset($value["NO_CACHE"]) || 'TRUE' != $value["NO_CACHE"]){
				if(false !== stripos($value["HREF"], 'http')){
					#echo 'HAZ HTTP['.$value["HREF"].']<br>'.PHP_EOL;
					$AssetCollection[] = new HttpAsset($value["HREF"], array());//new Assetic\Filter\LessFilter());
				}else{
					#echo 'NOT HAZ HTTP['.$_SERVER["DOCUMENT_ROOT"].$value["HREF"].']<br>'.PHP_EOL;
					if(!isset($value["HREF"]) || '' == $value["HREF"]){
						if(is_array($value)){
							#echo __METHOD__.'@'.__LINE__.'  value<pre>['.var_export($value, true).']</pre> '.'<br>'.PHP_EOL;  
							$cacheCSSArgs = array(
								'collection' => $value,
								'name' => $filename,
								'route' => '',
							);
							#$this->cacheCSS($cacheCSSArgs);
							$AssetCollection[] = new StringAsset($this->cacheCSS($cacheCSSArgs), array());
							#$AssetCollection[] = new StringAsset($value["HREF"], new LessFilter());//new LessFilter());
						}
					}else{
						$AssetCollection[] = new FileAsset(
							$_SERVER["DOCUMENT_ROOT"].$value["HREF"] 
							, $this->CSS_FILTER
						);
							/*
							array() 
							, array(new CleanCssFilter)
							, array(new UglifyCssFilter)
							, array(new CssRewriteFilter)
							, dirname($_SERVER["DOCUMENT_ROOT"].$value["HREF"])
							, '/assets/cache'
							*/
						/*
						new *Filter());
							#array(new Assetic\Filter\...),
							#sourceRoot, 
							#sourcePath,
						*/
						
					}
				}				
			}


		}

		$css = new AssetCollection($AssetCollection, $Filter);

		
		$fileContents = $css->dump();
		#echo __METHOD__.'@'.__LINE__.'  fileContents<pre>['.var_export(strlen($fileContents), true).']</pre> '.'<br>'.PHP_EOL; 
		#$result = file_put_contents($this->settings["writePath"].$logDate, $this->traceString, FILE_APPEND | LOCK_EX);
		$finalFilename = $_SERVER["DOCUMENT_ROOT"].'/'.$this->HTTP_PATH.$filename.'.css';
		#echo __METHOD__.'@'.__LINE__.'  write to $finalFilename['.$finalFilename.'] '.'<br>'.PHP_EOL; 
		$result = file_put_contents($finalFilename, $fileContents);
		#echo __METHOD__.'@'.__LINE__.'  result<pre>['.var_export($result, true).']</pre> '.'<br>'.PHP_EOL; 
	
		return $result;
	}
	/**
	* DESCRIPTOR: cacheJS
	* 
	* 
	* @access public
	* @param array args 
	* @return bool  
	*/
	public function cacheJS($args=null){
		$checkCacheArgs = $this->checkCacheArgs($args);
		if(true !== $checkCacheArgs){
			#echo __FILE__.__LINE__.'<b>$checkCacheArgs</b>['.$checkCacheArgs.'] $args["name"] ['.$args["name"].']'.'<br>'.PHP_EOL;
			return $checkCacheArgs;
		}

		$filename = $this->getCachedName($args);
		#echo 'HAZ filename['.$filename.']<br>'.PHP_EOL;
		$AssetCollection = array();
		foreach($args["collection"] AS $key => $value){
			if(isset($value["SRC"])){
				$replace = array(""); 
				$search  = array('"', 'src=', " ", ); 
				$cleanedName = str_replace($search, $replace, $value["SRC"] );
				#echo '$cleanedName['.$cleanedName.']  <br>'.PHP_EOL;
				
			}else{
				#echo '<b>RENDER BODY</b>  <br>'.PHP_EOL;
				
			}
			
			/*
			*/
			if(false !== stripos($cleanedName, 'http')){
				#echo 'HAZ HTTP['.$value["SRC"].']<br>'.PHP_EOL;
				$AssetCollection[] = new HttpAsset($cleanedName, array());//new Assetic\Filter\LessFilter());
			}else{
				if(isset($value["BODY"]) && '' != $value["BODY"]){
					#echo 'NOT HAZ SRC ['.$value["BODY"].']<br>'.PHP_EOL;
					if(is_array($value)){
						$cacheJSArgs = array(
							'collection' => $value,
							'name' => $filename,
							'route' => '',
						);
						$AssetCollection[] = new StringAsset($value["BODY"], array());
						#$AssetCollection[] = new StringAsset($value["BODY"], new LessFilter());//new LessFilter());
					}
				}else{
					#echo 'HAZ LOCAL PATH['.$_SERVER["DOCUMENT_ROOT"].$cleanedName.'] SRC['.$value["SRC"].'] BODY['.$value["BODY"].']<br>'.PHP_EOL;
					if('' != $cleanedName){
						#$AssetCollection[] = new FileAsset($_SERVER["DOCUMENT_ROOT"].$cleanedName, array());
						$AssetCollection[] = new FileAsset(
							$_SERVER["DOCUMENT_ROOT"].$cleanedName
							, $this->JS_FILTER
						);
					}
				}
			}

		}
		#echo __METHOD__.'@'.__LINE__.'  AssetCollection<pre>['.var_export($AssetCollection, true).']</pre> '.'<br>'.PHP_EOL;  
		
		#$Filter = array();
		$js = new AssetCollection($AssetCollection, $Filter);


		
		$fileContents = $js->dump();
		#echo __METHOD__.'@'.__LINE__.'  fileContents<pre>['.var_export(strlen($fileContents), true).']</pre> '.'<br>'.PHP_EOL; 
		#$result = file_put_contents($this->settings["writePath"].$logDate, $this->traceString, FILE_APPEND | LOCK_EX);
		$finalFilename = $_SERVER["DOCUMENT_ROOT"].'/'.$this->HTTP_PATH.$filename.'.js';
		#echo __METHOD__.'@'.__LINE__.'  write to $finalFilename['.$finalFilename.'] '.'<br>'.PHP_EOL; 
		$result = file_put_contents($finalFilename, $fileContents);
		#echo __METHOD__.'@'.__LINE__.'  result<pre>['.var_export($result, true).']</pre> '.'<br>'.PHP_EOL; 
	
		return $result;

	}

	

}



?>
