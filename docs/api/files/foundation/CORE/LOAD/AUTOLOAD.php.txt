<?php
/**
 * CONFIG_MANAGER (JCORE) CLASS
 * @author	Jason Medland<jason.medland@gmail.com>
 * @package	JCORE
 * @subpackage	LOAD
 */


namespace JCORE\LOAD;



/**
 * Class ComposerAutoloaderInit
 *
 * @package JCORE\LOAD
*/
class ComposerAutoloaderInit
{
	/**
	* private instance of Composer Autoload ClassLoader
	*
	* @access private
	* @var mixed
	*/
	private static $loader;
	
	/**
	* get the composer class loader file
	* 
	* @param mixed class
	* @return NULL 
	*/
    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/vendor/composer/ClassLoader.php';
        }
    }
	
	/**
	* parse the PSR-4 name spaces to generate the autoload
	* 
	* @param null
	* @return NULL 
	*/
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        spl_autoload_register(array('ComposerAutoloaderInit', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit', 'loadClassLoader'));

        /*
		$includePaths = require __DIR__ . '/include_paths.php';
        array_push($includePaths, get_include_path());
        set_include_path(join(PATH_SEPARATOR, $includePaths));
		*/

        $map = require __DIR__ . '/autoload_namespaces.php';
        foreach ($map as $namespace => $path) {
            $loader->set($namespace, $path);
        }

        /**
		$map = require __DIR__ . '/autoload_psr4.php';
        foreach ($map as $namespace => $path) {
            $loader->setPsr4($namespace, $path);
        }
		*/

        $classMap = require __DIR__ . '/autoload_classmap.php';
        if ($classMap) {
            $loader->addClassMap($classMap);
        }

        $loader->register(true);

        return $loader;
    }
}


/**
* load the composer file
* 
* @param null
* @return NULL 
*/
function composerRequire($file)
{
    require $file;
}


/*
function __autoload($calledClass) {
	$plugins = $GLOBALS['CONFIG_MANAGER']->getRegisteredPlugins();
	$loadFile = JCORE_PLUGINS_DIR.$calledClass.'/'.'CLASS/'.$calledClass.'.class.php';
	if(file_exists($loadFile)){
		include_once $loadFile;
	}else{
		$e = new \Exception();
		echo 'ERROR'.$calledClass.' in File:'.$loadFile.'<br> this plugin is not installed<br>'.$e->getTraceAsString();
	}

   return;
}
*/
?>
