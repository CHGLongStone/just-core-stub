<?php
/**
 * Class
 * @author		Jason Medland<jason.medland@gmail.com>
 * @package		JCORE
 * @subpackage	DATA\API
 */
namespace JCORE\DATA\API\MySQL;
use JCORE\EXCEPTION\DATA_Exception as DATA_Exception;
/**
 * Class MYSQL_TABLE_META
 *
 * @package JCORE\DATA\API\MySQL
*/
 class MySQL_TABLE_META{
	
	/**
	 * dbType
	 * @access private 
	 * @var string $dbType
	 */
	private $dbType = 'MYSQL';
	
	/**
	 * tableName 
	 * @access public 
	 * @var string
	 */
	public $tableName = NULL;
	
	/**
	 * DSN Data Source Name
	 * @access public 
	 * @var string
	 */
	public $DSN = NULL;
	
	/**
	 * tableProperties
	 * @access public 
	 * @var string
	 */
	public $tableProperties = NULL; //array();
	
	/**
	 * connectionObject
	 * @access public 
	 * @var string
	 */
	public $connectionObject = NULL; //array();
	
	/**
	 * columnNames
	 * @access protected 
	 * @var string
	 */
	protected $columnNames = NULL; //array();
	
	
	
	/**
	 * Constructor
	 * 
	 * @access public 
	 * @return	NULL
	 */
	public function __construct(){
		/*
		echo __METHOD__.'::'.__LINE__.' '.PHP_EOL;
		GLOBAL $logCFG;
		$settings 		= $logCFG["DATA"];
		$this->logger	= new logInternal($settings);
		*/
		#$this->logger	=& $GLOBALS['LOG_DATA'];
		$this->logger	=& $GLOBALS['LOG_DATA'];
		return;
	}
	/**
	* DESCRIPTOR: unsets internal properties
	* 
	* @access public 
	* @param	NULL
	* @return NULL 
	*/
	public function flushData(){
		#echo __METHOD__.'::'.__LINE__.'-------================()()()())()()())()()()()()()()()()()()()()()('.PHP_EOL;
		#$this->connectionObject	= NULL; should always bee the same in called context
		$this->tableName 		= '';
		$this->DSN 				= '';
		#$this->setProperties 	= '';
		$this->tableProperties	= array();
		return;
	}
	
	/**
	* DESCRIPTOR: Get the "private" dbType
	* 
	* @access public 
	* @param	NULL
	* @return string $dbType 
	*/
	public function getDbType(){
		return $this->dbType;
	}
	
	/**
	* DESCRIPTOR: IE: Stores meta data for table in a traversable form
	* 
	* @access public 
	* @param	String DSN
	* @param	String tableName
	* @param	mixed connectionObject
	* @return NULL 
	*/
	public function initialize($DSN, $tableName, $connectionObject=NULL){
		/***
		#echo __METHOD__.'::'.__LINE__.'$DSN['.$DSN.']'.PHP_EOL;
		echo __METHOD__.'::'.__LINE__.'$DSN<pre>'.var_export($DSN, true).'</pre>'.PHP_EOL;
		echo __METHOD__.'::'.__LINE__.'$tableName['.$tableName.']'.PHP_EOL;
		echo __METHOD__.'::'.__LINE__.'$connectionObject['.gettype($connectionObject).']'.PHP_EOL;
		echo __METHOD__.'::'.__LINE__.'$connectionObject<pre>'.var_export($connectionObject, true).'</pre>'.PHP_EOL;
		#getSetting($LOAD_ID = null, $SECTION_NAME = null, $SETTING_NAME = NULL)
		#GLOBAL $dbInterface;
		#echo __FILE__.'::'.__LINE__.'$introspectionClass['.$connectionObject.']---------[$connectionObject]['.gettype($connectionObject).']<pre>'.var_export($connectionObject,true).'</pre>'.PHP_EOL;
		*/
		/**
		* always pass the connection object 
		*/
		#echo __METHOD__.'::'.__LINE__.'$DSN['.$DSN.']'.PHP_EOL;
		if(!isset($connectionObject) || !is_object($connectionObject)){
			#echo __METHOD__.'::'.__LINE__.'FAIL NO CONN OBJECT $DSN['.$DSN.']['.$tableName.']'.gettype($connectionObject).'$data<pre>'.print_r($data, true).'</pre>'.PHP_EOL;
			return FALSE;
		}
		$this->connectionObject = $connectionObject;
		#echo __METHOD__.'::'.__LINE__.'$DSN['.$DSN.']'.PHP_EOL;
		
		#$this->connectionObject = $connectionObject;
		
		unset($this->tableProperties);
		$this->tableProperties	= array();
		#$caller=__CLASS__.'->'.__FUNCTION__;
		#echo '['.__CLASS__.'->'.__FUNCTION__.'] DSN=['.$DSN.'] tableName=['.$tableName.']'."\n";
		#echo __METHOD__.'::'.__LINE__.'$DSN['.$DSN.']'.PHP_EOL;
		$this->DSN = $DSN;
		$this->tableName = $tableName;
		#echo __METHOD__.'::'.__LINE__.'$DSN['.$DSN.']'.PHP_EOL;
		/**
		redundant, we deal with this in the DATA_API
		if(FALSE === $this->validateConnectionObject($connectionObject)){ 
			#echo __METHOD__.'::'.__LINE__.'-----------------------------RESET $connectionObject['.gettype($connectionObject).']'.PHP_EOL;
			$this->connectionObject = $connectionObject;
		}		
		*/
		#SQLResultToAssoc($result, $query)
		$query = 'SHOW COLUMNS FROM `'.$this->tableName.'`;  ';
		$query = '
			SELECT 
				c.TABLE_NAME as `Table`,
				c.COLUMN_NAME AS `Field`, 
				c.DATA_TYPE AS `Type`, 
				c.COLUMN_TYPE AS `ColumnType`,
				c.IS_NULLABLE AS `IS_NULLABLE`,
				c.COLUMN_KEY AS `Key`,
				c.COLUMN_DEFAULT AS `Default`,
				c.EXTRA AS `Extra`,
				k.CONSTRAINT_NAME, 
				k.REFERENCED_TABLE_NAME, 
				k.REFERENCED_COLUMN_NAME
			FROM `information_schema`.`columns` c
				LEFT JOIN information_schema.`KEY_COLUMN_USAGE` k
				ON k.TABLE_NAME = c.TABLE_NAME
				AND k.COLUMN_NAME = c.COLUMN_NAME
				/*
				LEFT JOIN information_schema.`REFERENTIAL_CONSTRAINTS` r
				ON r.CONSTRAINT_NAME = k.CONSTRAINT_NAME
				AND r.TABLE_NAME = k.TABLE_NAME	
				*/
			WHERE  c.TABLE_SCHEMA = "'.$DSN["database"].'"
				AND c.TABLE_NAME = "'.$this->tableName.'"
				
				
		';


		#echo __METHOD__.'::'.__LINE__.'$query<pre>['.$query.']<pre>'.PHP_EOL;
		$args =array(
			"returnArray" => true
		);
		$result = $this->connectionObject->retrieve( $query, $args);///, $returnArray=true
		#$result2 = $this->connectionObject->retrieve( $query2, $args);///, $returnArray=true
		#echo __METHOD__.'::'.__LINE__.'$result<pre>'.var_export($result, true).'</pre>'.PHP_EOL;
		#$result = $this->connectionObject->SQLResultToAssoc($result, $query);
		#echo __METHOD__.'::'.__LINE__.'$result<pre>'.var_export($result, true).'</pre>'.PHP_EOL;
		#echo __METHOD__.'::'.__LINE__.'$data<pre>'.print_r($data, true).'</pre>'.PHP_EOL;
		$this->setProperties($result);
		/*
		*/
		return;
	}
	/**
	* DESCRIPTOR: check if the DB connection is valid to what we want to do
	* @param mixed $data 
	* @return bool $valid 
	private function validateConnectionObject($connectionObject = NULL){
		echo __METHOD__.'::'.__LINE__.'$connectionObject['.gettype($connectionObject).']'.PHP_EOL;
		#echo __METHOD__.'::'.__LINE__.'$connectionObject<pre>'.var_export($connectionObject, true).'</pre>'.PHP_EOL;
		#echo __METHOD__.'::'.__LINE__.'$connectionObject<pre>'.var_export($this->connectionObject, true).'</pre>'.PHP_EOL;
		#echo __METHOD__.'::'.__LINE__.'$connectionObject<pre>'.print_r($connectionObject, true).'</pre>'.PHP_EOL;
		#echo __METHOD__.'::'.__LINE__.'$connectionObject->DSN['.$connectionObject->DSN.']'.PHP_EOL;
		#echo __METHOD__.'::'.__LINE__.'$this->connectionObject->DSN['.$this->connectionObject->DSN.']'.PHP_EOL;
		
		$valid = FALSE;
		//
		if(isset($this->connectionObject)){
			if(isset($this->connectionObject->DSN) && $this->connectionObject->DSN == $connectionObject->DSN){
				return TRUE;
			}
		}		
		return $valid;
	}
	*/
	/**
	* DESCRIPTOR: setProperties
	*  this->tableProperties
	*  
	* @access private 
	* @param mixed $resultArray 
	* @return NULL 
	*/
	private function setProperties($resultArray = NULL){
		#echo __METHOD__.'::'.__LINE__.'$this->columnNames<pre>'.print_r($this->columnNames, true).'</pre>';
		#echo __METHOD__.'::'.__LINE__.'$resultArray<pre>'.print_r($resultArray, true).'</pre>';
		#echo __METHOD__.'::'.__LINE__.'$resultArray2<pre>'.print_r($resultArray2, true).'</pre>';
		#echo '$resultArray['.__FUNCTION__.']<pre>'.print_r($resultArray, true).'</pre>';
		//echo __METHOD__.'::'.__LINE__.'$resultArray<pre>'.print_r($resultArray, true).'</pre>'.PHP_EOL;
		if($resultArray == NULL){
			$this->logger->log(LOG_WARNING, __METHOD__, '$resultArray == NULL');
			return;
		}
		foreach($resultArray AS $key => $value){
			if(!isset($this->tableProperties[$value["Field"]])){
				$subject = $value["ColumnType"];
				$pattern = '/ ^  (\w*)  \(    (\d*)    \)       /x';
				$matches = array();
				preg_match($pattern, $subject, $matches);
				#$this->columnNames->$value["Field"]->index = $key;
				#echo '['.$value["Field"].']matches<pre>'.print_r($matches, true).'</pre>'.PHP_EOL;
				if( strpos ( $value["Type"], 'enum') === false){
					if(count($matches) == 0){
						$this->tableProperties[$value["Field"]]["type"] 	= $value["Type"];
						#$this->tableProperties[$value["Field"]]["length"] 	= $matches[2];				
					}else{
						$this->tableProperties[$value["Field"]]["type"] 	= $matches[1];
						$this->tableProperties[$value["Field"]]["length"] 	= $matches[2];				
					}
					

				}else{
					$this->tableProperties[$value["Field"]]["type"] 	= 'enum';
					$this->tableProperties[$value["Field"]]["options"] 	= explode("','",preg_replace("/(enum|set)\('(.+?)'\)/","\\2",stripslashes($value["ColumnType"])));
				}
				
				$this->tableProperties[$value["Field"]]["ColumnType"] 	= $value["ColumnType"];
				
				$this->tableProperties[$value["Field"]]["default"] 		= $value["Default"];
				$this->tableProperties[$value["Field"]]["allowNull"] 	= $value["IS_NULLABLE"];
				if($value["Extra"] == 'auto_increment'){
					$this->tableProperties[$value["Field"]]["autoIncrement"] 	= true;
				}
				if($value["Key"] != ''){
					/**
					$this->tableProperties[$value["Field"]]["key"] = array(
						$value["Key"]
					);
					*/
					$this->tableProperties[$value["Field"]]["key"]["keytype"] = $value["Key"];
				}
			}
			//CONTRAINT_NAME
			if( '' != $value["CONSTRAINT_NAME"] && 'PRI' != $value["Key"]){
				#echo __METHOD__.'::'.__LINE__.'$key ['.$key.'] $value<pre>'.print_r($value, true).'</pre>';
				$this->tableProperties[$value["Field"]]["key"]["keydef"]["name"] 		= $value["CONSTRAINT_NAME"];
				if('' != $value["REFERENCED_TABLE_NAME"]){
					$this->tableProperties[$value["Field"]]["key"]["keydef"]["RefTable"]		= $value["REFERENCED_TABLE_NAME"];
				}	
				if('' != $value["REFERENCED_COLUMN_NAME"]){
					$this->tableProperties[$value["Field"]]["key"]["keydef"]["RefColumn"]	= $value["REFERENCED_COLUMN_NAME"];
				}
					
			}
				
				
		}
		#$this->errors[] = '';
	}
	/**
	* DESCRIPTOR: IE: Stores meta data for table in a traversable form
	*  data ARG NEEDED??
	* 
	* @access public 
	* @param mixed $data
	* @return NULL 
	*/
	public function getTableProperties($data = NULL){
		#echo __METHOD__.'::'.__LINE__.'$data<pre>'.print_r($data, true).'</pre>'.PHP_EOL;
		if(isset($this->tableProperties) && is_array($this->tableProperties) && count($this->tableProperties) > 0){
			return $this->tableProperties;
		}
		return NULL;
	}
	/**
	* DESCRIPTOR: gets the primary key from the data set in "tableProperties"
	* 
	* @access public 
	* @param mixed $data 
	* @return NULL 
	*/
	public function getPrimaryKeyField($data = NULL){
		#echo __METHOD__.'::'.__LINE__.'$data<pre>'.print_r($data, true).'</pre>'.PHP_EOL;
		if($data == NULL || !is_array($data)){
			$this->logger->log(LOG_WARNING, __METHOD__, '$data == '.gettype($data).'');
			return;
		}
		foreach($data AS $Key => $value){
			#echo '$Key=['.$Key.']<pre>'.var_export($value,true).'</pre>';
			//autoIncrement' => true,
			//key' => 'primary'
			if( isset($value["key"]) && $value["key"] == 'primary'){
				return $Key;
			}elseif(isset($value["autoIncrement"]) && $value["key"] == 'primary'){
				return $Key;
			}else{
				return;
			}
		}
	}

	//----------------------------------------------------
	
	//----------------------------------------------------
}
 

?>
