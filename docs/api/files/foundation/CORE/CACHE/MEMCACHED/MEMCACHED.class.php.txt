<?php
/**
 * Memcached Class
 * Connection Classes can be created for any CACHE supported by PHP
 * create wrappers for existing API's with this interface
$filePath = JCORE_BASE_DIR.'CACHE/CACHE_COMMON_API_INTERFACE.interface.php';
require_once($filePath);
 * 
 * @author		Jason Medland
 * @package		JCORE\CACHE
 * @subpackage	JCORE\CACHE
 * 
 *
 */
namespace JCORE\CACHE;
use JCORE\CACHE\CACHE_COMMON_API_INTERFACE as CACHE_COMMON_API_INTERFACE;
/**
 * Class MEMCACHED
 *
 * @package JCORE\CACHE
*/
class MEMCACHED implements CACHE_COMMON_API_INTERFACE{
	/**
	* intialized
	 * @access private 
	 * @var bool
	 */
	private $intialized = false;
	/**
	* DESCRIPTOR: __construct
	* @param null
	* @return null
	*/
	public function __construct(){
	
	
	}
	/**
	* DESCRIPTOR:  intialize
	* @param null
	* @return null
	*/
	public function intialize(){
		$this->intialized = true;
	}
	/**
	* DESCRIPTOR:  isIntialized
	* @param null
	* @return bool
	*/
	public function isIntialized(){
		if($this->intialized === true){
			return true;
		}
	}
	
	//----------//----------//----------//----------//----------
	//----------//USER RESOURCES 		//----------//----------
	//----------//----------//----------//----------//----------
	/**
	* getValue
	* DESCRIPTOR: Does a "Get" on a Memcached resource 
	* 	args is an array that MUST follow this format
	* 	args["KEY"] 		= [string]; 		// a Memcached asset ID
	* 	args["cas_token"] 	= &cas_token; 		// a var passed by reference to return the cas_token used by: updateSharedResource
	* 	args["cache_cb"] 	= NULL/[string]; 	// the call back function. probably not much use for resetting (big tangle, too many functions) BUT could be usefull for logging
	* 
	* @access public
	* @param array args
	* @return bool 
	*/
	public static function getValue($args = array()){
		echo 'METHOD['.__METHOD__.'] LINE['.__LINE__.']'.'<br>';
		$CACHED_VAR = FALSE;
		if(MEMCACHED_API::validateBasicArgs($args) === false){
			echo 'METHOD['.__METHOD__.'] validateBasicArgs'.'<br>';
			$GLOBALS["LOG_CACHE"]->log(LOG_WARNING,__METHOD__, 'CALLED WITHOUT CACHE_KEY!!!!');
			return false;
		}
		#echo 'METHOD['.__METHOD__.'] GOOOD!!!!'.'<br>';
		
		// $args["CACHE_POOL"];
		#echo 'METHOD['.__METHOD__.'] CACHE_POOL_OBJECT[<pre>'.var_export($CACHE_POOL_OBJECT, true).'<pre>]'.'<br>';
		/**
		* execution block
		*/
		$CACHE_POOL_OBJECT = MEMCACHED_API::getMemcachedObject($args["CACHE_POOL"]);
		if(true == $CACHE_POOL_OBJECT){
			$CACHED_VAR = $CACHE_POOL_OBJECT->get($args["CACHE_KEY"]);
			$resultCode = MEMCACHED_API::checkResultCode($CACHE_POOL_OBJECT, $args["CACHE_KEY"]);
			if(true == $resultCode && is_bool($resultCode)){
				return $CACHED_VAR;
			}
		}
		if(!isset($resultCode) || !is_numeric($resultCode)){
			$resultCode = Memcached::RES_FAILURE;
		}
		$message = MEMCACHED_API::getResultCodeString($resultCode);
		$result['EXCEPTION']["ID"] = $resultCode;
		$result['EXCEPTION']["MSG"] = $message;
		echo 'METHOD['.__METHOD__.'] FAILED['.__LINE__.']'.'<br>';
		
		return false;
		#mixed Memcached::get  ( string $key  [, callback $cache_cb  [, float &$cas_token  ]] )

	}

	/**
	* setValue
	* DESCRIPTOR: Does a "Check and Set" on a shared resource 
	* 	args is an array that MUST follow this format
	* 	args["KEY"] 		= [string]; 		// a Memcached asset ID
	* 	args["value"] 		= [mixed]; 			// a asset to be stored in Memcached
	* 	args["expiration"] = [int]; 	// the call back function. probably not much use for resetting (big tangle, too many functions) BUT could be usefull for logging
	* 
	* @access public
	* @param array args
	* @return bool 
	*/
	public static function setValue($args = array()){
		
		if(MEMCACHED_API::validateBasicArgs($args) === false){
			$GLOBALS["LOG_CACHE"]->log(LOG_WARNING,__METHOD__, 'CALLED WITHOUT CACHE_KEY!!!!');
			return false;
		}
		
		
		#$CACHE_POOL, $CACHE_KEY
		#bool Memcached::set  ( string $key  , mixed $value  [, int $expiration  ] ) Store an item
		#TRUE on success or FALSE on failure. 
		#Use Memcached::getResultCode if necessary. 
	}
	//----------//----------//----------//----------//----------
	//----------//END USER RESOURCES 	//----------//----------
	//----------//----------//----------//----------//----------
	
	//----------//----------//----------//----------//----------
	//----------//START UTIL FUNCTIONS 	//----------//----------
	//----------//----------//----------//----------//----------
	/** 
	* validateBasicArgs
	* just check that there are args in the array
	* define it here for re-use
	* 
	* @access public
	* @param array args
	* @return bool 
	*/
	public static function validateBasicArgs($args = array()){
		echo 'METHOD['.__METHOD__.'] '.'<br>';
		if(MEMCACHED_API::verifyArgs($args) === false){
			$GLOBALS["LOG_CACHE"]->log(LOG_WARNING,__METHOD__, 'CALLED WITHOUT ARGS!!!!');
			return false;
		}
		if(MEMCACHED_API::validateCachePool($args) === false){
			$GLOBALS["LOG_CACHE"]->log(LOG_WARNING,__METHOD__, 'CALLED WITHOUT CACHE_POOL!!!!');
			return false;
		}
		if(MEMCACHED_API::validateCacheKey($args) === false){
			$GLOBALS["LOG_CACHE"]->log(LOG_WARNING,__METHOD__, 'CALLED WITHOUT CACHE_KEY!!!!');
			return false;
		}
		
		#echo 'METHOD['.__METHOD__.'] GOOOD'.'<br>';
		return true;
	}
	
		
	/**
	* verifyArgs
	* just check that there are args in the array
	* define it here for re-use
	* 
	* @access public
	* @param array args
	* @return bool 
	*/
	public static function verifyArgs($args = array()){
		echo 'METHOD['.__METHOD__.'] count($args)['.count($args).']'.'<br>';
		if(count($args) == 0){
			#$GLOBALS["LOG_CACHE"]->log(LOG_WARNING,__METHOD__, 'CALLED WITHOUT ARGS!!!!');
			return false;
		}
		return true;
	}
	/**
	* validateCachePool
	* just check that there are args in the array
	* define it here for re-use
	* 
	* @access public
	* @param array args
	* @return bool 
	*/
	public static function validateCachePool($args){
		echo 'METHOD['.__METHOD__.'] $args["CACHE_POOL"]['.$args["CACHE_POOL"].']'.'<br>';
		if(!isset($args["CACHE_POOL"]) || $args["CACHE_POOL"] == ''){
			#$GLOBALS["LOG_CACHE"]->log(LOG_WARNING,__METHOD__, 'CALLED WITHOUT CACHE_POOL!!!!');
			return false;
		}
		return true;
	}
	
	/**
	* validateCacheKey
	* just check that there are args in the array
	* define it here for re-use
	* 
	* @access public
	* @param array args
	* @return bool 
	*/
	public static function validateCacheKey($args = array()){	
		echo 'METHOD['.__METHOD__.'] $args["CACHE_KEY"]['.$args["CACHE_KEY"].']'.'<br>';
		if(!isset($args["CACHE_KEY"]) || $args["CACHE_KEY"] == ''){
			#$GLOBALS["LOG_CACHE"]->log(LOG_WARNING,__METHOD__, 'CALLED WITHOUT CACHE_POOL!!!!');
			return false;
		}
		#echo 'METHOD['.__METHOD__.'] GOOD!!!!!]'.'<br>';
		return true;
	}

	//----------//----------//----------//----------//----------
	//----------//END UTIL FUNCTIONS 	//----------//----------
	//----------//----------//----------//----------//----------
	/**
	* updateSharedValue
	* 
	* @access public
	* @param array args
	* @return bool 
	*/
	public function updateSharedValue($args = array()){
	
	}
	/**
	* setSharedValue
	* 
	* @access public
	* @param array args
	* @return bool 
	*/
	public function setSharedValue($args = array()){
	
	}
	/**
	* getSharedValue
	* 
	* @access public
	* @param array args
	* @return bool 
	*/
	public function getSharedValue($args = array()){
	
	
	}
	
	
}
?>
