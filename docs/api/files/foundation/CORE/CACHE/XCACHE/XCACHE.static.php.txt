<?php
/**
 * Connection Classes can be created for any CACHE supported by PHP
 * create wrappers for existing API's with this interface
 * @ignore
 * @author		Jason Medland
 * @package		JCORE
*
*/

namespace JCORE\CACHE;
use JCORE\JCORE_SINGLETON AS  JCORE_SINGLETON;
use JCORE\CACHE\STATIC_API_INTERFACE AS STATIC_API_INTERFACE;


/**
 * Class XCACHE_static
 * 
 * @implements JCORE\CACHE\STATIC_API_INTERFACE
 * @package JCORE\CACHE
*/
class XCACHE_static extends JCORE_SINGLETON implements STATIC_API_INTERFACE {
	/**
	* private instance of the class 
	* 
	* @access private 
	* @var bool 
	*/
	private static $instance;
	/**
	* is the object initialized 
	* 
	* @access private 
	* @var bool 
	*/
	private $intialized = false;
	
	/**
	* DESCRIPTOR: __construct
	* 
	* @access private 
	* @param array args
	* @return null
	*/
	private function __construct($args=null){
	
	
	}
	/**
	* singleton method
	* 
	* @access public 
	* @param array args
	* @return mixed
	*/
    public static function singleton($args=null){
        #echo '<b>singleton['.__METHOD__.']['.__CLASS__.']['.get_class(self).']['.self::$instance.']</b>';
		if (!isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }
        #echo '<b>singleton['.__METHOD__.']['.__CLASS__.']['.get_class(self).']['.self::$instance.']</b>';
		return self::$instance;
    }
	/**
	* DESCRIPTOR: intialize
	* 
	* @access public 
	* @param array args
	* @return null
	*/
	public function intialize($args){
		if(isset($args) && is_array($args)){
			foreach($args as $key => $value){
				#$keyName = '$this->'.$key;
				$this->cfg[$key] = $value;
			}
		}
		$this->intialized = true;
	}
	/**
	* DESCRIPTOR: isIntialized
	* 
	* @access public 
	* @param null
	* @return null
	*/
	public function isIntialized(){
		if($this->intialized === true){
			echo __METHOD__.__LINE__.'<br>';
			return true;
		}
	}
	/**
	* DESCRIPTOR: getValue
	* result or false on failure
	* args["KEY"]
	* 
	* 
	* @access public 
	* @param array args
	* @return null
	*/
	public static function getValue($args = array()){
		#mixed xcache_get (string $key) 
		#echo __METHOD__.__LINE__.'<br>';
		
		#echo __METHOD__.__LINE__.'$args<pre>'.var_export($args, true).'</pre><br>';
		
		if(isset($args["KEY"]) && $args["KEY"] != ''){
			#echo __METHOD__.__LINE__.'function_exists-xcache_get-['.function_exists('xcache_get').']<br>';
			$var = xcache_get($args["KEY"]);
			/**
			*/
			if(is_string($var)){
				#echo __METHOD__.__LINE__.'<pre>'.var_export($var, true).'</pre><br>';
				unset($args);
				$args["DATA"] = $var;
				$args["assoc"] = TRUE;
				$var = SERIALIZATION::unserializeJSON($args);
			}
			#echo __METHOD__.__LINE__.'<pre>'.var_export($var, true).'</pre><br>';
			return $var;
		}
		#echo __METHOD__.__LINE__.'<br>';
		return false;
	}
	/**
	* DESCRIPTOR: 
	* result or false on failure
	* args["KEY"]
	* args["DATA"]
	* args["ttl"]
	* 
	* 
	* @access public 
	* @param array args
	* @return null
	*/
	public static function setValue($args = array()){
		#boolean xcache_set (string $key, mixed $value, [int $ttl = 0]) 
		if(!isset($args["KEY"]) || $args["KEY"] == ''){
			return false;
		}
		if(!isset($args["DATA"]) || $args["DATA"] === null){
			return false;
		}
		$args["DATA"] = json_encode($args["DATA"]);
		if(isset($args["ttl"]) || $args["ttl"] == ''){
			$args["ttl"] = 0;
		}
		return xcache_set($args["KEY"], $args["DATA"], $args["ttl"]);
	}
	/**
	* DESCRIPTOR: 
	* result or false on failure
	* args["KEY"]
	* args["DATA"]
	* args["ttl"]
	* 
	* 
	* @access public 
	* @param array args
	* @return null
	*/
	public static function updateSharedValue($args = array()){
		//Warning, you don't need this to lock the keys used with eaccelerator_get and eaccelerator_put
		//boolean eaccelerator_lock (string $key)
		if(!isset($args["KEY"]) || $args["KEY"] == ''){
			return false;
		}
		if(!isset($args["DATA"]) || $args["DATA"] === null){
			return false;
		}
		if(isset($args["ttl"]) || $args["ttl"] == ''){
			$args["ttl"] = 0;
		}
		
		$value =  XCACHE::setValue($args);
		#return eaccelerator_put($key, $value, $ttl=0);
		
		return $value;
	}
	
	/**
	* DESCRIPTOR: 
	* result or false on failure
	* args["KEY"]
	* args["DATA"]
	* args["ttl"]
	* 
	* @access public
	* @param args array
	* @return mixed
	*/
	public static function setSharedValue($args = array()){
		
		if(!isset($args["KEY"]) || $args["KEY"] == ''){
			return false;
		}
		if(!isset($args["DATA"]) || $args["DATA"] === null){
			return false;
		}
		if(isset($args["ttl"]) || $args["ttl"] == ''){
			$args["ttl"] = 0;
		}
		$value =  XCACHE::setValue($args);
		return $value;
	
	}
	/**
	* DESCRIPTOR: 
	* result or false on failure
	* args["KEY"]
	* args["ttl"]
	* 
	* @access public
	* @param args array
	* @return mixed
	*/
	public static function getSharedValue($args = array()){
		#mixed eaccelerator_get (string $KEY) 
		if(!isset($args["KEY"]) || $args["KEY"] == ''){
			return false;
		}
		$value =  EACCELERATOR::getValue($args);
		return $value;

	}
	
	
}
?>
