<?php
/**
* Class LOGIN_SERVICE 
* 
* @author	Jason Medland<jason.medland@gmail.com>
* @package	JCORE
* @subpackage	AUTH
*/
 

namespace JCORE\SERVICE\AUTH;
use JCORE\TRANSPORT\SOA\SOA_BASE as SOA_BASE;
use JCORE\DAO\DAO as DAO;
use JCORE\AUTH\AUTH_INTERFACE as AUTH_INTERFACE;



/**
* Class LOGIN_SERVICE 
* https://github.com/CHGLongStone/just-core-auth-login
* 
* Very basic auth mechanism to white list API calls from other servers
* this is ONLY in place to limit access to an API based on white list
* there is no other authentication hook behind this fro granular control
* implementation ripped straight from here: 
*  https://sunnyis.me/blog/secure-passwords/
* input from here:
*  http://www.openwall.com/articles/PHP-Users-Passwords
*  https://github.com/ircmaxell/password_compat
*  http://php.net/manual/en/function.password-hash.php
* 
* @package JCORE\SERVICE\AUTH 
*/
class LOGIN_SERVICE extends SOA_BASE implements AUTH_INTERFACE{ 
	/**
	* serviceRequest
	* 
	* @access protected 
	* @var string
	*/
	protected $serviceRequest = null;
	/**
	* serviceResponse
	* 
	* @access public 
	* @var string
	*/
	public $serviceResponse = null;
	/**
	* error
	* 
	* @access public 
	* @var string
	*/
	public $error = null;
	
	/**
	* DESCRIPTOR: an empty constructor, the service MUST be called with 
	* the service name and the service method name specified in the 
	* in the method property of the JSONRPC request in this format
	* 		""method":"AJAX_STUB.aServiceMethod"
	* 
	* @param null 
	* @return null  
	*/
	public function __construct(){
		return;
	}
	/**
	* DESCRIPTOR: init
	* 
	* @access public 
	* @param array args
	* @return null
	*/
	public function init($args){
		/**
		* echo __METHOD__.__LINE__.'$args<pre>['.var_export($args, true).']</pre>'.'<br>'; 
		*/
		$this->cfg = $GLOBALS["CONFIG_MANAGER"]->getSetting('AUTH','LOGIN_SERVICE','AUTH_TYPE');
		return;
	}
	/**
	* DESCRIPTOR: testInstall
	* 
	* @access public 
	* @param array args
	* @return null
	*/
	public function testInstall($args){
		
		if (isset($_SERVER['APPLICATION_ENV']) && $_SERVER['APPLICATION_ENV'] != 'production') {
			if(true !== function_exists('\password_hash')){
				echo 'native password_* functions not available'.PHP_EOL;
			}else{
				\PasswordCompat\binary\check() ? $test="Pass" : $test="Fail";
				if("Fail" == $test){
					echo 'Test for functionality of compat library: ' .$test.'<br>'.PHP_EOL.'
					see https://github.com/ircmaxell/password_compat <br>'.PHP_EOL.'
					phpversion ['.phpversion ().']<br>
					';
					echo "\n";
				}
			}
			
		}
		return;
	}
	/**
	* DESCRIPTOR: authenticate against:
	* abstracted for JCORE-AUTH-AUTH_HARNESS
	*   UserLogin
	*   UserSession
	*   APICall
	*   APICallToken
	* 
	* @access public 
	* @param array params
	* @return bool
	*/
	public function authenticate($params = null){
		if(!isset($params["AUTH_TYPE"])){
			return false;
		}
		switch(strtolower($params["AUTH_TYPE"])){//authType
			case "user":
				$this->authenticateUserLogin($params);
				break;
			case "session":
				$this->authenticateUserSession($params);
				break;
			case "api":
				#action 
				$this->authenticateAPICall($params);
				break;
			case "token":
				#action 
				$this->authenticateAPICallToken($params);
				break;
			
			default:
				return false;
				break;
		}
		
		if(isset($this->serviceResponse["status"]) && 'OK' == $this->serviceResponse["status"]){
			return true;
		}
		return false;
	}
	
	
	/**
	* DESCRIPTOR: authorize
	* ACL hook stub
	* 
	* @access public 
	* @param array params
	* @return bool
	*/
	public function authorize($params = null){
		
		return false;
	}
	/**
	* DESCRIPTOR: authenticateUserLogin
	* authenticate a login 
	*   - email
	*   - password
	* - get the user role ACL hook
	* 
	* @access public 
	* @param array args
	* @return array
	*/
	public function authenticateUserLogin($args){
		
		$this->init($args);
		$this->DAO = new DAO();
		$config = $this->cfg['USER'];
		$searchCriteria = array(
				'email' => $args["email"],
		);
		$config["search"] = $searchCriteria;
		$this->DAO->initializeBySearch($config);
		$stored_hash = $this->DAO->get($config["table"], 'password');
		
		if(true ===  \password_verify($args['password'], $stored_hash)){
			$result['status'] = 'OK';
			$result['user_id'] = $this->DAO->get($config["table"], $config["pk_field"]);
			$result['comp_id'] = $this->DAO->get($config["table"], 'client_fk');
			$result['role_id'] = $this->DAO->get($config["table"], 'user_role_fk');
			/*


			*/
			$this->serviceResponse = $result;
		}else{
			$result['error'] = 'failed to authenticate';
			$this->serviceResponse = $result;
		}
		
		return $this->serviceResponse;
	}
	
	
	/**
	* DESCRIPTOR: authenticateUserSession 
	* user_id or user_email
	* 
	* @access public 
	* @param array args
	* @return array
	*/
	public function authenticateUserSession($args){

		if(
			!isset($_SESSION) 
			||
			(
				!isset($_SESSION['user_id']) 
				|| 
				!is_numeric($_SESSION['user_id'])
			)
			|| 
			!isset($_SESSION['user_email'])
		){
			$result['error'] = 'failed to authenticate';
			$this->serviceResponse = $result;
			return $this->serviceResponse;
		}
		$this->init($args);
		$config = $this->cfg['SESSION'];
		$searchCriteria = array(
				'email' => $_SESSION["user_email"],
		);
		$config["search"] = $searchCriteria;
		$this->DAO = new DAO();

		$this->DAO->initializeBySearch($config);
		$user_id = $this->DAO->get($config["table"], $config["pk_field"]);
		if($user_id  == $_SESSION['user_id']){
			$result['status'] = 'OK';
			$this->serviceResponse = $result;
			return $this->serviceResponse;
		}
		return false;
	}
	/**
	* DESCRIPTOR: authenticateAPICall
	* http header based 
	*   HTTP_API_KEY
	*   HTTP_PASS_PHRASE
	* 
	* @access public 
	* @param array args
	* @return array
	*/
	public function authenticateAPICall($args){
		/*
		echo __METHOD__.__LINE__.'$_SERVER<pre>['.var_export($_SERVER, true).']</pre>'.PHP_EOL; 
		echo __METHOD__.__LINE__.'$args<pre>['.var_export($args, true).']</pre>'.PHP_EOL; 
		
		abstract these 2 to config params HTTP_PASS_PHRASE, HTTP_API_KEY
		echo __METHOD__.__LINE__.'$_SERVER["HTTP_PASS_PHRASE"]<pre>['.var_export($_SERVER["HTTP_PASS_PHRASE"], true).']</pre>'.PHP_EOL; 
		echo __METHOD__.__LINE__.'$_SERVER["HTTP_API_KEY"]<pre>['.var_export($_SERVER["HTTP_API_KEY"], true).']</pre>'.PHP_EOL; 
		#print_r(apache_response_headers());
		#print_r(get_headers());
		*/
		if(
			!isset($_SERVER['HTTP_API_KEY']) 
			|| 
			!isset($_SERVER['HTTP_PASS_PHRASE'])
		){
			$result['error'] = 'failed to authenticate';
			$this->serviceResponse = $result;
			return $this->serviceResponse;
		}
		$this->init($args);
		$config = $this->cfg['API'];
		$searchCriteria = array(
				'api_key' => $_SERVER["HTTP_API_KEY"],
		);
		$config["search"] = $searchCriteria;
		$this->DAO = new DAO();
		#echo __METHOD__.__LINE__.'$config<pre>['.var_export($config, true).']</pre>'.PHP_EOL; 
		$this->DAO->initializeBySearch($config);
		$stored_hash = $this->DAO->get($config["table"], 'pass_phrase');
		#echo __METHOD__.__LINE__.'$stored_hash<pre>['.var_export($stored_hash, true).']</pre>'.PHP_EOL; 
		
		if(true ===  \password_verify($_SERVER['HTTP_PASS_PHRASE'], $stored_hash)){
			$result['status'] = 'OK';
			$result['client_id'] = $this->DAO->get($config["table"], $config["pk_field"]);
			/*
			$result['comp_id'] = $this->DAO->get($config["table"], $config["pk_field"]);
			$result['role_id'] = $this->DAO->get($config["table"], $config["pk_field"]);
			*/
			$this->serviceResponse = $result;
		}else{
			$result['error'] = 'failed to authenticate';
			$this->serviceResponse = $result;
		}
	}
	
	/**
	* DESCRIPTOR: authenticateAPICallToken
	* check a "PUBLIC_TOKEN" in an auth whitelist
	* 
	* @access public 
	* @param array args
	* @return array
	*/
	public function authenticateAPICallToken($args){
		/*
		echo __METHOD__.__LINE__.'$_SERVER<pre>['.var_export($_SERVER, true).']</pre>'.PHP_EOL; 
		echo __METHOD__.__LINE__.'$args<pre>['.var_export($args, true).']</pre>'.PHP_EOL; 
		
		abstract these 2 to config params HTTP_PASS_PHRASE, HTTP_API_KEY
		echo __METHOD__.__LINE__.'$_SERVER["HTTP_PASS_PHRASE"]<pre>['.var_export($_SERVER["HTTP_PASS_PHRASE"], true).']</pre>'.PHP_EOL; 
		echo __METHOD__.__LINE__.'$_SERVER["HTTP_API_KEY"]<pre>['.var_export($_SERVER["HTTP_API_KEY"], true).']</pre>'.PHP_EOL; 
		#print_r(apache_response_headers());
		#print_r(get_headers());
		*/
		if(
			!isset($_REQUEST['PUBLIC_TOKEN']) 
		){
			$result['error'] = 'failed to authenticate';
			$this->serviceResponse = $result;
			return $this->serviceResponse;
		}
		$this->init($args);
		$config = $this->cfg['TOKEN'];
		#echo __METHOD__.__LINE__.'$config<pre>['.var_export($config, true).']</pre>'.PHP_EOL; 
		if(
			true === in_array($_REQUEST['PUBLIC_TOKEN'],$config['TOKEN_HAYSTACK'])
		){
			$result['status'] = 'OK';
			$this->serviceResponse = $result;
			return $this->serviceResponse;
		}else{
			return false;
		}
	}
	
	
	/**
	* DESCRIPTOR: stubbeh 
	* 
	* 
	* @access public 
	* @param array args
	* @return array
	*/
	public function aServiceMethod($args){
		#echo __METHOD__.__LINE__.'<br>';
		#echo __METHOD__.__LINE__.'$args<pre>['.var_export($args, true).']</pre>'.'<br>'; 
		if(!isset($args["action"])){
			$this->error = new StdClass();
			$this->error->code = "FAILED_CALL";
			$this->error->message = ' NO SERVICE ACTION DEFINED';
			$this->error->data = 'no service call made';
			return false;
		}

		$this->serviceResponse = array();
		$this->serviceResponse["title"] = 'Block Eight';
		$this->serviceResponse["type"] = 'page';
		return true;
	}
	
}



?>
