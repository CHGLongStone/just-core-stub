; 
; all the caches are loaded into a pool defined in [CACHE_SOURCE]
; CSN [Cache_Source_Name] defines the name space of the cache
; tis name space is used to load lower sections in this file 
; which define the global configuration parameters for the cache
; if the the cache type offers true cache pooling/distribution {like memcached)
; the configuration manager will also try to load a file [/CACHE_SOURCE/[Cache_Source_Name].ini] 
; defining the connection parameters for each cache source in the pool
;------------------------------------------------------

;------------------------------------------------------
; CSN [Cache Source Name]
; this namespace will load files 
; lower sections that are not listed in [CACHE_SOURCE] 
; will not be loaded nor have their sub files loaded
;
[CACHE_SOURCE]
CSN[] = "BASIC_FILE_CACHE"
CSN[] = "JCORE_SYSTEM"
CSN[] = "JCORE_DATA"

;------------------------------------------------------


;------------------------------------------------------
; these settings are required for every "Cache_Source_Name"
; CACHE_TYPE="FILECACHE" 	[FILECACHE/COUCHDB/EACCELERATOR/MEMCACHE/MEMCACHED/XCACHE/ROLL_YOUR_OWN]
; 	CACHE_TYPE name space defines the implementation class and its directory
;
; IMPLEMENTATION="STATIC"	[STATIC/CONCRETE] 
; 	the cache implemetations can be either behindthe API
;
; ACTIVE="TRUE" 			[TRUE/FALSE] 
; 	whether or not to load/initialize the cache
;
; LOAD_POOL="FALSE"			[TRUE/FALSE] 
; 	whether or not to load the subfile
;
; once loaded all settings in this file are available 
; through the CONFIG_MANAGER regardless of 
; load/initialize state of the implementation (lazy load as you need to)
;------------------------------------------------------
; further settings are specific to the cache type and the implementation
;------------------------------------------------------

[BASIC_FILE_CACHE]
CACHE_TYPE="FILECACHE"
;[STATIC/CONCRETE] could be either in this case [FILECACHE], 
; if you need to keep the file pointer open between writes
; make it a CONCRETE implementation
IMPLEMENTATION="STATIC"		 	
ACTIVE="FALSE" 
LOAD_POOL="FALSE"
;------------------------------------------------------
; further settings are specific to the cache type
;we can load constants here that are set in config.php of the API or 
; just use a simple string "/var/www/JCORE/CACHE/FILE/"
;
FILE_PATH = JCORE_FILE_CACHE_DIR

[JCORE_SYSTEM]
CACHE_TYPE="EACCELERATOR"
IMPLEMENTATION="STATIC"	
ACTIVE="TRUE" 
LOAD_POOL="FALSE"
;------------------------------------------------------
; this is just a test to load and apply ini settings
; this is for dev/debug only 
ini_set.eaccelerator.allowed_admin_path1="/var/www"
ini_set.eaccelerator.allowed_admin_path2="/var/www"
ini_set.eaccelerator.allowed_admin_path3="/var/www"


[JCORE_DATA]
CACHE_TYPE="MEMCACHED"
; has to track a list of servers needs concrete implementation
IMPLEMENTATION="CONCRETE"	
ACTIVE="TRUE"
LOAD_POOL="TRUE"
;------------------------------------------------------
; By default the Memcached instances are destroyed at the end of the request. 
; To create an instance that persists between requests, use persistent_id to 
; specify a unique ID for the instance. All instances created with the same 
; persistent_id will share the same connection. 
; http://us2.php.net/manual/en/memcached.construct.php
; if PERSISTENT is set to TRUE (as a string) below this section name will be used 
; as the  persistent_id 
; THESE SETTINGS USE Memcached class constants  http://ca3.php.net/manual/en/memcached.constants.php
; Applied Via Memcached::setOption()  http://ca3.php.net/manual/en/memcached.setoption.php
; you should move them to your php.ini or one of the ini files it loads
PERSISTENT="TRUE"
;DISTRIBUTION_CONSISTENT/DISTRIBUTION_MODULA
DISTRIBUTION="DISTRIBUTION_CONSISTENT" 
OPT_LIBKETAMA_COMPATIBLE="TRUE"
OPT_BINARY_PROTOCOL="TRUE"
ACTIVE_SERVERS=2


